{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * This file contains some function stubs(ie incomplete functions) that\n * you MUST use to begin the work for calculating the grades.\n *\n * You may need more functions than are currently here...we highly encourage you to define more.\n *\n * Anything that has a type of \"undefined\" you will need to replace with something.\n */\n\nimport { useState } from 'react';\nimport { MY_BU_ID, BASE_API_URL, GET_DEFAULT_HEADERS } from \"../globals\";\n\n/**\n * This function might help you write the function below.\n * It retrieves the final grade for a single student based on the passed params.\n * \n * If you are reading here and you haven't read the top of the file...go back.\n */\n//const [currStudentGrades, setStudentGrades] = useState<number[]>([]);\n\nexport function gradeCalculation(classId, classAssessments, classStudents) {\n  _s();\n  const [currStudentGrades, setStudentGrades] = useState([]);\n  async function callGrades(classId, studentId) {\n    const res = await fetch(`${BASE_API_URL}/student/listGrades/${studentId}/${classId}?buid=${MY_BU_ID}`, {\n      method: \"GET\",\n      headers: GET_DEFAULT_HEADERS()\n    });\n    const json = await res.json();\n    const gradesObject = json.grades;\n    const gradeValues = Object.values(gradesObject).flatMap(nestedObject => Object.values(nestedObject).map(str => parseInt(str, 10)));\n    setStudentGrades(gradeValues);\n    console.log(\"Current student's grades:\");\n    console.log(currStudentGrades);\n  }\n  ;\n  function calcGrade(grades, weight) {\n    const summing = grades.reduce((accumulator, currentValue, index) => {\n      const product = currentValue * weight[index];\n      return accumulator + product;\n    }, 0);\n    return summing;\n  }\n  async function calculateStudentFinalGrade(classId,\n  //\"A123\"\n  studentId,\n  // \"U123\"\n  weight // [90]\n  //klass: IUniversityClass what is this variable supposed to rep?\n  ) {\n    await callGrades(classId, studentId);\n    console.log(\"IM HEERE\");\n    console.log(currStudentGrades);\n    const grade = calcGrade(currStudentGrades, weight);\n    return grade; //with the classAssignments we know the weight of each assignment\n    // with /student/listGrades/studentID/classID we get the grade of these assignemnts\n  }\n\n  /**\n   * You need to write this function! You might want to write more functions to make the code easier to read as well.\n   * \n   *  If you are reading here and you haven't read the top of the file...go back.\n   * \n   * @param classID The ID of the class for which we want to calculate the final grades\n   * @returns Some data structure that has a list of each student and their final grade.\n   */\n  async function calcAllFinalGrade(classId, assessments, students) {\n    const grades = [];\n    console.log(\"this is weight:\");\n    console.log(assessments);\n    await Promise.all(students.map(async studentId => {\n      const grade = await calculateStudentFinalGrade(classId, studentId, assessments);\n      const studentGrade = {\n        studentId,\n        grade\n      };\n      grades.push(studentGrade);\n    }));\n    /*   students.forEach(async (studentId) => {\n        var grade = await calculateStudentFinalGrade(classId, studentId, assessments)\n        //console.log(grade)\n        var studentGrade = {studentId, grade}\n        grades.push(studentGrade);\n      }) */\n    console.log(\"All Grades for this Class:\");\n    console.log(grades);\n    return grades; //grab all students in this class and fun above func on each\n  }\n\n  return calcAllFinalGrade(classId, classAssessments, classStudents);\n}\n_s(gradeCalculation, \"jYCADHo9I28tFtowKlWil/58xpY=\");","map":{"version":3,"names":["useState","MY_BU_ID","BASE_API_URL","GET_DEFAULT_HEADERS","gradeCalculation","classId","classAssessments","classStudents","currStudentGrades","setStudentGrades","callGrades","studentId","res","fetch","method","headers","json","gradesObject","grades","gradeValues","Object","values","flatMap","nestedObject","map","str","parseInt","console","log","calcGrade","weight","summing","reduce","accumulator","currentValue","index","product","calculateStudentFinalGrade","grade","calcAllFinalGrade","assessments","students","Promise","all","studentGrade","push"],"sources":["/Users/sun/Dropbox/My Mac (Michelles-Air)/Desktop/BU/2023/diagnostic-test-mlxs01/src/utils/calculate_grade.ts"],"sourcesContent":["/**\n * This file contains some function stubs(ie incomplete functions) that\n * you MUST use to begin the work for calculating the grades.\n *\n * You may need more functions than are currently here...we highly encourage you to define more.\n *\n * Anything that has a type of \"undefined\" you will need to replace with something.\n */\nimport { IUniversityClass, IUniversityGrades } from \"../types/api_types\";\nimport { studentGrade } from \"../types/api_types\";\nimport { useState, useEffect } from 'react';\nimport { MY_BU_ID, BASE_API_URL, GET_DEFAULT_HEADERS } from \"../globals\";\n\n/**\n * This function might help you write the function below.\n * It retrieves the final grade for a single student based on the passed params.\n * \n * If you are reading here and you haven't read the top of the file...go back.\n */\n//const [currStudentGrades, setStudentGrades] = useState<number[]>([]);\n\nexport function gradeCalculation(classId: string, classAssessments: number[], classStudents: string[]):Promise<studentGrade[]> {\n  const [currStudentGrades, setStudentGrades] = useState<number[]>([]);\n\n  async function callGrades(classId: string, studentId: string): Promise<void> {\n      const res = await fetch(`${BASE_API_URL}/student/listGrades/${studentId}/${classId}?buid=${MY_BU_ID}`, {\n        method: \"GET\",\n        headers: GET_DEFAULT_HEADERS()\n      });\n  \n      const json:IUniversityGrades = await res.json();\n  \n      const gradesObject = json.grades\n      const gradeValues = Object.values(gradesObject).flatMap((nestedObject) => Object.values(nestedObject).map((str) => parseInt(str, 10)));\n  \n      setStudentGrades(gradeValues);\n      console.log(\"Current student's grades:\");\n      console.log(currStudentGrades);\n  };\n\n  function calcGrade(grades: number[], weight: number[]) {\n    const summing = grades.reduce((accumulator, currentValue, index) => {\n      const product = currentValue * weight[index];\n      return accumulator + product;\n    }, 0);\n    return summing\n  }\n  \n  async function calculateStudentFinalGrade(\n    classId: string, //\"A123\"\n    studentId: string, // \"U123\"\n    weight: number[], // [90]\n    //klass: IUniversityClass what is this variable supposed to rep?\n  ): Promise<number> {\n    await callGrades(classId, studentId);\n    console.log(\"IM HEERE\")\n    console.log(currStudentGrades)\n    const grade = calcGrade(currStudentGrades, weight)\n    return grade; //with the classAssignments we know the weight of each assignment\n    // with /student/listGrades/studentID/classID we get the grade of these assignemnts\n  }\n  \n  /**\n   * You need to write this function! You might want to write more functions to make the code easier to read as well.\n   * \n   *  If you are reading here and you haven't read the top of the file...go back.\n   * \n   * @param classID The ID of the class for which we want to calculate the final grades\n   * @returns Some data structure that has a list of each student and their final grade.\n   */\n  async function calcAllFinalGrade(classId: string, assessments: number[], students: string[]): Promise<studentGrade[]> {\n    const grades: studentGrade[] = []\n    console.log(\"this is weight:\")\n    console.log(assessments);\n    await Promise.all(students.map(async (studentId) => {\n      const grade = await calculateStudentFinalGrade(classId, studentId, assessments);\n      const studentGrade = { studentId, grade };\n      grades.push(studentGrade);\n    }));\n  /*   students.forEach(async (studentId) => {\n      var grade = await calculateStudentFinalGrade(classId, studentId, assessments)\n      //console.log(grade)\n      var studentGrade = {studentId, grade}\n      grades.push(studentGrade);\n    }) */\n    console.log(\"All Grades for this Class:\")\n    console.log(grades)\n    return grades; //grab all students in this class and fun above func on each\n  }\n\n  return calcAllFinalGrade(classId, classAssessments, classStudents);\n}"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,QAAQ,QAAmB,OAAO;AAC3C,SAASC,QAAQ,EAAEC,YAAY,EAAEC,mBAAmB,QAAQ,YAAY;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,gBAAgB,CAACC,OAAe,EAAEC,gBAA0B,EAAEC,aAAuB,EAA0B;EAAA;EAC7H,MAAM,CAACC,iBAAiB,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAW,EAAE,CAAC;EAEpE,eAAeU,UAAU,CAACL,OAAe,EAAEM,SAAiB,EAAiB;IACzE,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEX,YAAa,uBAAsBS,SAAU,IAAGN,OAAQ,SAAQJ,QAAS,EAAC,EAAE;MACrGa,MAAM,EAAE,KAAK;MACbC,OAAO,EAAEZ,mBAAmB;IAC9B,CAAC,CAAC;IAEF,MAAMa,IAAsB,GAAG,MAAMJ,GAAG,CAACI,IAAI,EAAE;IAE/C,MAAMC,YAAY,GAAGD,IAAI,CAACE,MAAM;IAChC,MAAMC,WAAW,GAAGC,MAAM,CAACC,MAAM,CAACJ,YAAY,CAAC,CAACK,OAAO,CAAEC,YAAY,IAAKH,MAAM,CAACC,MAAM,CAACE,YAAY,CAAC,CAACC,GAAG,CAAEC,GAAG,IAAKC,QAAQ,CAACD,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;IAEtIhB,gBAAgB,CAACU,WAAW,CAAC;IAC7BQ,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IACxCD,OAAO,CAACC,GAAG,CAACpB,iBAAiB,CAAC;EAClC;EAAC;EAED,SAASqB,SAAS,CAACX,MAAgB,EAAEY,MAAgB,EAAE;IACrD,MAAMC,OAAO,GAAGb,MAAM,CAACc,MAAM,CAAC,CAACC,WAAW,EAAEC,YAAY,EAAEC,KAAK,KAAK;MAClE,MAAMC,OAAO,GAAGF,YAAY,GAAGJ,MAAM,CAACK,KAAK,CAAC;MAC5C,OAAOF,WAAW,GAAGG,OAAO;IAC9B,CAAC,EAAE,CAAC,CAAC;IACL,OAAOL,OAAO;EAChB;EAEA,eAAeM,0BAA0B,CACvChC,OAAe;EAAE;EACjBM,SAAiB;EAAE;EACnBmB,MAAgB,CAAE;EAClB;EAAA,EACiB;IACjB,MAAMpB,UAAU,CAACL,OAAO,EAAEM,SAAS,CAAC;IACpCgB,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IACvBD,OAAO,CAACC,GAAG,CAACpB,iBAAiB,CAAC;IAC9B,MAAM8B,KAAK,GAAGT,SAAS,CAACrB,iBAAiB,EAAEsB,MAAM,CAAC;IAClD,OAAOQ,KAAK,CAAC,CAAC;IACd;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,eAAeC,iBAAiB,CAAClC,OAAe,EAAEmC,WAAqB,EAAEC,QAAkB,EAA2B;IACpH,MAAMvB,MAAsB,GAAG,EAAE;IACjCS,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAC9BD,OAAO,CAACC,GAAG,CAACY,WAAW,CAAC;IACxB,MAAME,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACjB,GAAG,CAAC,MAAOb,SAAS,IAAK;MAClD,MAAM2B,KAAK,GAAG,MAAMD,0BAA0B,CAAChC,OAAO,EAAEM,SAAS,EAAE6B,WAAW,CAAC;MAC/E,MAAMI,YAAY,GAAG;QAAEjC,SAAS;QAAE2B;MAAM,CAAC;MACzCpB,MAAM,CAAC2B,IAAI,CAACD,YAAY,CAAC;IAC3B,CAAC,CAAC,CAAC;IACL;AACF;AACA;AACA;AACA;AACA;IACIjB,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IACzCD,OAAO,CAACC,GAAG,CAACV,MAAM,CAAC;IACnB,OAAOA,MAAM,CAAC,CAAC;EACjB;;EAEA,OAAOqB,iBAAiB,CAAClC,OAAO,EAAEC,gBAAgB,EAAEC,aAAa,CAAC;AACpE;AAAC,GAtEeH,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}