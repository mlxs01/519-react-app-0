{"ast":null,"code":"var _jsxFileName = \"/Users/sun/Dropbox/My Mac (Michelles-Air)/Desktop/BU/2023/diagnostic-test-mlxs01/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { Select, Typography, MenuItem } from \"@mui/material\";\n//import { calcAllFinalGrade } from \"./utils/calculate_grade\";\n/**\n * You will find globals from this file useful!\n */\nimport { MY_BU_ID, BASE_API_URL, SEMESTER, GET_DEFAULT_HEADERS } from \"./globals\";\nimport GradeTable from \"./components/GradeTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // You will need to use more of these!\n  const [currClassId, setCurrClassId] = useState(\"\"); //this needs to be the classId\n  //const [classList, setClassList] = useState<IUniversityClass[]>([]); //This needs to be the names\n  const [currClassName, setCurrClassName] = useState(\"\"); //this needs to be currClassName\n  const [currData, setData] = useState([]);\n  const [allGrades, setGrades] = useState([]);\n  const [allClassIds, setClassIds] = useState([]);\n  const [allClassNames, setClassNames] = useState([]);\n  const [currFilteredStudents, setFilteredStudents] = useState([]);\n  const [currStudentNames, setStudentNames] = useState([]);\n  const [currFilteredAssignments, setFilteredAssignments] = useState([]);\n  //const [currStudent, setStudent] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const studentData = [];\n\n  /**\n   * This is JUST an example of how you might fetch some data(with a different API).\n   * As you might notice, this does not show up in your console right now.\n   * This is because the function isn't called by anything!\n   *\n   * You will need to lookup how to fetch data from an API using React.js\n   * Something you might want to look at is the useEffect hook.\n   *\n   * The useEffect hook will be useful for populating the data in the dropdown box.\n   * You will want to make sure that the effect is only called once at component mount.\n   *\n   * You will also need to explore the use of async/await.\n   *\n   */\n  useEffect(() => {\n    const fetchData = async () => {\n      // fetch the list of classes\n      const classListResponse = await fetch(`${BASE_API_URL}/class/listBySemester/${SEMESTER}?buid=${MY_BU_ID}`, {\n        method: \"GET\",\n        headers: GET_DEFAULT_HEADERS()\n      });\n      const classListData = await classListResponse.json();\n\n      // pull out class Ids and class Names\n      const classIds = classListData.map(item => item.classId);\n      const classNames = classListData.map(item => item.title);\n      setClassIds(classIds);\n      setClassNames(classNames);\n    };\n    fetchData().then(() => {\n      setIsLoading(false);\n    });\n  }, []);\n  useEffect(() => {\n    if (currClassId !== \"\") {\n      //console.log(currClassId);\n      const fetchStudents = async () => {\n        const res = await fetch(`${BASE_API_URL}/class/listStudents/${currClassId}?buid=${MY_BU_ID}`, {\n          method: \"GET\",\n          headers: GET_DEFAULT_HEADERS()\n        });\n        const json = await res.json();\n        //console.log(\"student fetch response\", json);\n        setFilteredStudents(json);\n      };\n      const fetchAssignments = async () => {\n        const res = await fetch(`${BASE_API_URL}/class/listAssignments/${currClassId}?buid=${MY_BU_ID}`, {\n          method: \"GET\",\n          headers: GET_DEFAULT_HEADERS()\n        });\n        const json = await res.json();\n        const filteredValues = await json.map(item => item.weight);\n        setFilteredAssignments(filteredValues);\n      };\n      fetchAssignments();\n      fetchStudents();\n    }\n  }, [currClassId, currClassName]);\n  useEffect(() => {\n    if (currFilteredStudents.length > 0 && currFilteredAssignments.length > 0) {\n      console.log(\"students:\", currFilteredStudents);\n      const filteredValues = [];\n      const fetchAndSetGrades = async () => {\n        const grades = await calcAllGrades();\n        setGrades(grades);\n      };\n      currFilteredStudents.forEach(student => {\n        fetchStudentNames(student).then(result => {\n          filteredValues.push(result);\n        });\n      });\n      setStudentNames(filteredValues);\n      fetchAndSetGrades();\n    }\n  }, [currFilteredStudents, currFilteredAssignments]);\n  useEffect(() => {\n    if (allGrades.length > 0) {\n      hookUpData();\n      console.log(\"For Grid Table:\", studentData);\n      setData(studentData);\n      setIsLoading(false);\n    }\n  }, [allGrades]);\n  const fetchStudentNames = async student => {\n    const res = await fetch(`${BASE_API_URL}/student/GetById/${student}?buid=${MY_BU_ID}`, {\n      method: \"GET\",\n      headers: GET_DEFAULT_HEADERS()\n    });\n    const json = await res.json();\n    const filteredData = json[0].name;\n    return filteredData;\n  };\n  const fetchStudentGrades = async student => {\n    const res = await fetch(`${BASE_API_URL}/student/listGrades/${student}/${currClassId}?buid=${MY_BU_ID}`, {\n      method: \"GET\",\n      headers: GET_DEFAULT_HEADERS()\n    });\n    const json = await res.json();\n    const gradesObject = json.grades[0];\n    const gradeValues = Object.values(gradesObject).map(Number);\n    return gradeValues;\n  };\n  async function calcAllGrades() {\n    const grades = [];\n    const gradePromises = currFilteredStudents.map(student => fetchStudentGrades(student));\n    const gradeResults = await Promise.all(gradePromises);\n    gradeResults.forEach(gradeValues => {\n      const grade = calcGrade(gradeValues, currFilteredAssignments);\n      grades.push(grade);\n    });\n    console.log(\"All grades calculated:\", grades);\n    return grades;\n  }\n  function calcGrade(grades, weight) {\n    const summing = grades.reduce((accumulator, currentValue, index) => {\n      const product = currentValue * ~~(weight[index] / 100);\n      return accumulator + product;\n    }, 0);\n    return summing;\n  }\n  ;\n  function hookUpData() {\n    allGrades.forEach((grade, index) => {\n      const studentId = currFilteredStudents[index];\n      const studentName = currStudentNames[index];\n      const data = createData(studentId, studentName, currClassId, currClassName, SEMESTER, grade);\n      studentData.push(data);\n    });\n  }\n  function createData(studentId, studnetName, classId, className, semester, finalGrade) {\n    return {\n      studentId,\n      studnetName,\n      classId,\n      className,\n      semester,\n      finalGrade\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      style: {\n        padding: \"1rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        xs: 12,\n        container: true,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          gutterBottom: true,\n          children: \"Spark Assessment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        xs: 12,\n        md: 4,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          gutterBottom: true,\n          children: \"Select a class\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"100%\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            fullWidth: true,\n            label: \"Class\",\n            value: currClassName,\n            onChange: event => {\n              const selectedClassName = event.target.value; // Get the selected class name\n              const selectedIndex = allClassNames.indexOf(selectedClassName); // Find the index\n\n              if (selectedIndex !== -1) {\n                setIsLoading(true);\n                setCurrClassId(allClassIds[selectedIndex]);\n                setCurrClassName(selectedClassName);\n              }\n            },\n            children: allClassNames.map((className, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: className,\n              children: className\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 15\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        xs: 12,\n        md: 8,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          gutterBottom: true,\n          children: \"Final Grades\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 25\n        }, this) : \"\", /*#__PURE__*/_jsxDEV(GradeTable, {\n          studentData: currData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rrlT+ga7tcIeEVJkGZvVE7yMOSg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Grid","Select","Typography","MenuItem","MY_BU_ID","BASE_API_URL","SEMESTER","GET_DEFAULT_HEADERS","GradeTable","App","currClassId","setCurrClassId","currClassName","setCurrClassName","currData","setData","allGrades","setGrades","allClassIds","setClassIds","allClassNames","setClassNames","currFilteredStudents","setFilteredStudents","currStudentNames","setStudentNames","currFilteredAssignments","setFilteredAssignments","isLoading","setIsLoading","studentData","fetchData","classListResponse","fetch","method","headers","classListData","json","classIds","map","item","classId","classNames","title","then","fetchStudents","res","fetchAssignments","filteredValues","weight","length","console","log","fetchAndSetGrades","grades","calcAllGrades","forEach","student","fetchStudentNames","result","push","hookUpData","filteredData","name","fetchStudentGrades","gradesObject","gradeValues","Object","values","Number","gradePromises","gradeResults","Promise","all","grade","calcGrade","summing","reduce","accumulator","currentValue","index","product","studentId","studentName","data","createData","studnetName","className","semester","finalGrade","width","height","padding","event","selectedClassName","target","value","selectedIndex","indexOf"],"sources":["/Users/sun/Dropbox/My Mac (Michelles-Air)/Desktop/BU/2023/diagnostic-test-mlxs01/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { Select, Typography, MenuItem } from \"@mui/material\";\n//import { calcAllFinalGrade } from \"./utils/calculate_grade\";\n/**\n * You will find globals from this file useful!\n */\nimport { MY_BU_ID, BASE_API_URL, SEMESTER, TOKEN, GET_DEFAULT_HEADERS } from \"./globals\";\nimport { IUniversityClass, IUniversityAssignments, IUniversityGrades, IUniversityStudents } from \"./types/api_types\";\nimport GradeTable from \"./components/GradeTable\";\nimport GradeTableProps from \"./types/api_types\";\n\nfunction App() {\n  // You will need to use more of these!\n  const [currClassId, setCurrClassId] = useState<string>(\"\"); //this needs to be the classId\n  //const [classList, setClassList] = useState<IUniversityClass[]>([]); //This needs to be the names\n  const [currClassName, setCurrClassName] = useState<string>(\"\"); //this needs to be currClassName\n  const [currData, setData] = useState<GradeTableProps[\"studentData\"]>([]);\n  const [allGrades, setGrades] = useState<number[]>([]);\n  const [allClassIds, setClassIds] = useState<string[]>([]);\n  const [allClassNames, setClassNames] = useState<string[]>([]);\n  const [currFilteredStudents, setFilteredStudents] = useState<string[]>([]);\n  const [currStudentNames, setStudentNames] = useState<string[]>([]);\n  const [currFilteredAssignments, setFilteredAssignments] = useState<number[]>([]);\n  //const [currStudent, setStudent] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const studentData: Array<{\n    studentId: string;\n    studnetName: string;\n    classId: string;\n    className: string;\n    semester: string;\n    finalGrade: number;\n  }> = [];\n\n  /**\n   * This is JUST an example of how you might fetch some data(with a different API).\n   * As you might notice, this does not show up in your console right now.\n   * This is because the function isn't called by anything!\n   *\n   * You will need to lookup how to fetch data from an API using React.js\n   * Something you might want to look at is the useEffect hook.\n   *\n   * The useEffect hook will be useful for populating the data in the dropdown box.\n   * You will want to make sure that the effect is only called once at component mount.\n   *\n   * You will also need to explore the use of async/await.\n   *\n   */\n  useEffect(() => {\n    const fetchData = async () => {\n        // fetch the list of classes\n        const classListResponse = await fetch(\n          `${BASE_API_URL}/class/listBySemester/${SEMESTER}?buid=${MY_BU_ID}`,\n          {\n            method: \"GET\",\n            headers: GET_DEFAULT_HEADERS(),\n          }\n        );\n  \n        const classListData = await classListResponse.json();\n  \n        // pull out class Ids and class Names\n        const classIds = classListData.map((item: IUniversityClass) => item.classId);\n        const classNames = classListData.map((item: IUniversityClass) => item.title);\n\n        setClassIds(classIds);\n        setClassNames(classNames);\n    };\n  \n    fetchData().then(()=> {setIsLoading(false)});\n  }, []);\n\n  useEffect(() => {\n    if (currClassId !== \"\") {\n      //console.log(currClassId);\n      const fetchStudents = async () => {\n        const res = await fetch(`${BASE_API_URL}/class/listStudents/${currClassId}?buid=${MY_BU_ID}`, {\n          method: \"GET\",\n          headers: GET_DEFAULT_HEADERS()\n        });\n        const json = await res.json();\n        //console.log(\"student fetch response\", json);\n        setFilteredStudents(json); \n      };\n\n      const fetchAssignments = async () => {\n        const res = await fetch(`${BASE_API_URL}/class/listAssignments/${currClassId}?buid=${MY_BU_ID}`, {\n          method: \"GET\",\n          headers: GET_DEFAULT_HEADERS()\n        });\n        const json = await res.json();\n        \n        const filteredValues: number[] = await json.map((item:IUniversityAssignments) => item.weight );\n\n        setFilteredAssignments(filteredValues);\n      };\n\n      fetchAssignments();\n      fetchStudents();\n    }\n  }, [currClassId, currClassName]);\n\n  useEffect(() => {\n    if (currFilteredStudents.length > 0 && currFilteredAssignments.length > 0) {\n      console.log(\"students:\", currFilteredStudents);\n      const filteredValues: string[] = [];\n\n      const fetchAndSetGrades = async () => {\n        const grades = await calcAllGrades();\n        setGrades(grades);\n      };\n\n      currFilteredStudents.forEach((student) => {\n        fetchStudentNames(student).then((result)=>{filteredValues.push(result)});\n      });\n      setStudentNames(filteredValues);\n      fetchAndSetGrades();\n    }\n  }, [currFilteredStudents, currFilteredAssignments]);\n\n  useEffect(() => {\n    if (allGrades.length > 0) {\n      hookUpData();\n      console.log(\"For Grid Table:\", studentData);\n      setData(studentData);\n      setIsLoading(false);\n    }\n  }, [allGrades])\n\n  const fetchStudentNames = async (student: string) => {\n    const res = await fetch(`${BASE_API_URL}/student/GetById/${student}?buid=${MY_BU_ID}`, {\n      method: \"GET\",\n      headers: GET_DEFAULT_HEADERS()\n    });\n    const json = await res.json();\n  \n    const filteredData: string = json[0].name;\n    return filteredData;\n  }; \n\n  const fetchStudentGrades = async (student: string) => {\n    const res = await fetch(`${BASE_API_URL}/student/listGrades/${student}/${currClassId}?buid=${MY_BU_ID}`, {\n      method: \"GET\",\n      headers: GET_DEFAULT_HEADERS()\n    });\n  \n    const json = await res.json();\n    const gradesObject = json.grades[0];\n    const gradeValues: number[] = Object.values(gradesObject).map(Number);\n  \n    return gradeValues\n  };\n\n  async function calcAllGrades() {\n    const grades: number[] = [];\n    const gradePromises = currFilteredStudents.map((student) => fetchStudentGrades(student));\n    \n    const gradeResults = await Promise.all(gradePromises);\n    gradeResults.forEach((gradeValues) => {\n      const grade = calcGrade(gradeValues, currFilteredAssignments);\n      grades.push(grade);\n    });\n  \n    console.log(\"All grades calculated:\", grades);\n    return grades;\n  }\n\n  function calcGrade(grades: number[], weight: number[]) {\n    const summing = grades.reduce((accumulator, currentValue, index) => {\n      const product = currentValue * ~~(weight[index]/100);\n      return accumulator + product;\n    }, 0);\n    return summing;\n  };\n  \n  function hookUpData(){\n    allGrades.forEach((grade, index) => {\n      const studentId = currFilteredStudents[index];\n      const studentName = currStudentNames[index];\n      const data = createData(studentId, studentName, currClassId, currClassName, SEMESTER, grade);\n      studentData.push(data);\n    });\n  }\n\n  function createData(\n    studentId: string,\n    studnetName: string,\n    classId: string,\n    className: string,\n    semester: string,\n    finalGrade: number,\n  ) {\n    return { studentId, studnetName, classId, className, semester, finalGrade };\n  }\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\" }}>\n      <Grid container spacing={2} style={{ padding: \"1rem\" }}>\n        <Grid xs={12} container alignItems=\"center\" justifyContent=\"center\">\n          <Typography variant=\"h2\" gutterBottom>\n            Spark Assessment\n          </Typography>\n        </Grid>\n        <Grid xs={12} md={4}>\n          <Typography variant=\"h4\" gutterBottom>\n            Select a class\n          </Typography>\n          <div style={{ width: \"100%\" }}>\n          <Select\n            fullWidth={true}\n            label=\"Class\"\n            value={currClassName}\n            onChange={(event) => {\n              const selectedClassName = event.target.value; // Get the selected class name\n              const selectedIndex = allClassNames.indexOf(selectedClassName); // Find the index\n\n              if (selectedIndex !== -1) {\n                setIsLoading(true);\n                setCurrClassId(allClassIds[selectedIndex]);\n                setCurrClassName(selectedClassName);\n              }\n            }}\n          >\n            {allClassNames.map((className, index) => (\n              <MenuItem key={index} value={className}>\n                {className}\n              </MenuItem>\n            ))}\n          </Select>\n          </div>\n        </Grid>\n        <Grid xs={12} md={8}>\n          <Typography variant=\"h4\" gutterBottom>\n            Final Grades\n          </Typography>\n          {isLoading ? (<div>Loading data...</div>) : (\"\")}\n          <GradeTable studentData={currData} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}