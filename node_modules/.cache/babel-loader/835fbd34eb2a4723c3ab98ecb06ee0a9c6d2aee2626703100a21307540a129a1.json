{"ast":null,"code":"var _jsxFileName = \"/Users/sun/Dropbox/My Mac (Michelles-Air)/Desktop/BU/2023/diagnostic-test-mlxs01/src/components/GradeTable.tsx\";\n/**\n * You might find it useful to have some dummy data for your own testing.\n * Feel free to write this function if you find that feature desirable.\n * \n * When you come to office hours for help, we will ask you if you have written\n * this function and tested your project using it.\n */\nexport function dummyData() {\n  return [];\n}\n\n/**\n * This is the component where you should write the code for displaying the\n * the table of grades.\n *\n * You might need to change the signature of this function.\n *\n */\n//Will come back to this, grades is an object with all the info needed for this table\nimport * as React from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GradeTable = _ref => {\n  let {\n    studentData\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      sx: {\n        minWidth: 650\n      },\n      size: \"small\",\n      \"aria-label\": \"a dense table\",\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Student Id\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Studnet Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Class Id\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Class Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Semester\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Final Grade\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: studentData.map(std => /*#__PURE__*/_jsxDEV(TableRow, {\n          // Use studentId as the key, not studnetName\n          sx: {\n            '&:last-child td, &:last-child th': {\n              border: 0\n            }\n          },\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: std.studentId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: std.studnetName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: std.classId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: std.className\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: std.semester\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"right\",\n            children: std.finalGrade\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)]\n        }, std.studentId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_c = GradeTable;\nexport default GradeTable;\n\n/* const studentData: Array<{\n  studentId: string;\n  studnetName: string;\n  classId: string;\n  className: string;\n  semester: string;\n  finalGrade: number;\n}> = [];\n\nexport default function DenseTable() {\n  return (\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Student Id</TableCell>\n            <TableCell>Studnet Name</TableCell>\n            <TableCell>Class Id</TableCell>\n            <TableCell>Class Name</TableCell>\n            <TableCell>Semester</TableCell>\n            <TableCell>Final Grade</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {studentData.map((std) => (\n            <TableRow\n              key={std.studnetName}\n              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n            >\n              <TableCell>{std.studentId}</TableCell>\n              <TableCell>{std.studnetName}</TableCell>\n              <TableCell>{std.classId}</TableCell>\n              <TableCell>{std.className}</TableCell>\n              <TableCell>{std.semester}</TableCell>\n              <TableCell align=\"right\">{std.finalGrade}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n} */\nvar _c;\n$RefreshReg$(_c, \"GradeTable\");","map":{"version":3,"names":["dummyData","React","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","GradeTable","studentData","minWidth","map","std","border","studentId","studnetName","classId","className","semester","finalGrade"],"sources":["/Users/sun/Dropbox/My Mac (Michelles-Air)/Desktop/BU/2023/diagnostic-test-mlxs01/src/components/GradeTable.tsx"],"sourcesContent":["/**\n * You might find it useful to have some dummy data for your own testing.\n * Feel free to write this function if you find that feature desirable.\n * \n * When you come to office hours for help, we will ask you if you have written\n * this function and tested your project using it.\n */\nexport function dummyData() {\n  return [];\n}\n\n/**\n * This is the component where you should write the code for displaying the\n * the table of grades.\n *\n * You might need to change the signature of this function.\n *\n */\n//Will come back to this, grades is an object with all the info needed for this table\nimport * as React from 'react';\nimport GradeTableProps from '../types/api_types';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\n\n\nconst GradeTable: React.FC<GradeTableProps> = ({ studentData }) => {\n  return (\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Student Id</TableCell>\n            <TableCell>Studnet Name</TableCell>\n            <TableCell>Class Id</TableCell>\n            <TableCell>Class Name</TableCell>\n            <TableCell>Semester</TableCell>\n            <TableCell>Final Grade</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {studentData.map((std) => (\n            <TableRow\n              key={std.studentId} // Use studentId as the key, not studnetName\n              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n            >\n              <TableCell>{std.studentId}</TableCell>\n              <TableCell>{std.studnetName}</TableCell>\n              <TableCell>{std.classId}</TableCell>\n              <TableCell>{std.className}</TableCell>\n              <TableCell>{std.semester}</TableCell>\n              <TableCell align=\"right\">{std.finalGrade}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default GradeTable;\n\n/* const studentData: Array<{\n  studentId: string;\n  studnetName: string;\n  classId: string;\n  className: string;\n  semester: string;\n  finalGrade: number;\n}> = [];\n\nexport default function DenseTable() {\n  return (\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Student Id</TableCell>\n            <TableCell>Studnet Name</TableCell>\n            <TableCell>Class Id</TableCell>\n            <TableCell>Class Name</TableCell>\n            <TableCell>Semester</TableCell>\n            <TableCell>Final Grade</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {studentData.map((std) => (\n            <TableRow\n              key={std.studnetName}\n              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n            >\n              <TableCell>{std.studentId}</TableCell>\n              <TableCell>{std.studnetName}</TableCell>\n              <TableCell>{std.classId}</TableCell>\n              <TableCell>{std.className}</TableCell>\n              <TableCell>{std.semester}</TableCell>\n              <TableCell align=\"right\">{std.finalGrade}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n} */"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,SAAS,GAAG;EAC1B,OAAO,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,cAAc,MAAM,8BAA8B;AACzD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,KAAK,MAAM,qBAAqB;AAAC;AAGxC,MAAMC,UAAqC,GAAG,QAAqB;EAAA,IAApB;IAAEC;EAAY,CAAC;EAC5D,oBACE,QAAC,cAAc;IAAC,SAAS,EAAEF,KAAM;IAAA,uBAC/B,QAAC,KAAK;MAAC,EAAE,EAAE;QAAEG,QAAQ,EAAE;MAAI,CAAE;MAAC,IAAI,EAAC,OAAO;MAAC,cAAW,eAAe;MAAA,wBACnE,QAAC,SAAS;QAAA,uBACR,QAAC,QAAQ;UAAA,wBACP,QAAC,SAAS;YAAA,UAAC;UAAU;YAAA;YAAA;YAAA;UAAA,QAAY,eACjC,QAAC,SAAS;YAAA,UAAC;UAAY;YAAA;YAAA;YAAA;UAAA,QAAY,eACnC,QAAC,SAAS;YAAA,UAAC;UAAQ;YAAA;YAAA;YAAA;UAAA,QAAY,eAC/B,QAAC,SAAS;YAAA,UAAC;UAAU;YAAA;YAAA;YAAA;UAAA,QAAY,eACjC,QAAC,SAAS;YAAA,UAAC;UAAQ;YAAA;YAAA;YAAA;UAAA,QAAY,eAC/B,QAAC,SAAS;YAAA,UAAC;UAAW;YAAA;YAAA;YAAA;UAAA,QAAY;QAAA;UAAA;UAAA;UAAA;QAAA;MACzB;QAAA;QAAA;QAAA;MAAA,QACD,eACZ,QAAC,SAAS;QAAA,UACPD,WAAW,CAACE,GAAG,CAAEC,GAAG,iBACnB,QAAC,QAAQ;UACa;UACpB,EAAE,EAAE;YAAE,kCAAkC,EAAE;cAAEC,MAAM,EAAE;YAAE;UAAE,CAAE;UAAA,wBAE1D,QAAC,SAAS;YAAA,UAAED,GAAG,CAACE;UAAS;YAAA;YAAA;YAAA;UAAA,QAAa,eACtC,QAAC,SAAS;YAAA,UAAEF,GAAG,CAACG;UAAW;YAAA;YAAA;YAAA;UAAA,QAAa,eACxC,QAAC,SAAS;YAAA,UAAEH,GAAG,CAACI;UAAO;YAAA;YAAA;YAAA;UAAA,QAAa,eACpC,QAAC,SAAS;YAAA,UAAEJ,GAAG,CAACK;UAAS;YAAA;YAAA;YAAA;UAAA,QAAa,eACtC,QAAC,SAAS;YAAA,UAAEL,GAAG,CAACM;UAAQ;YAAA;YAAA;YAAA;UAAA,QAAa,eACrC,QAAC,SAAS;YAAC,KAAK,EAAC,OAAO;YAAA,UAAEN,GAAG,CAACO;UAAU;YAAA;YAAA;YAAA;UAAA,QAAa;QAAA,GARhDP,GAAG,CAACE,SAAS;UAAA;UAAA;UAAA;QAAA,QAUrB;MAAC;QAAA;QAAA;QAAA;MAAA,QACQ;IAAA;MAAA;MAAA;MAAA;IAAA;EACN;IAAA;IAAA;IAAA;EAAA,QACO;AAErB,CAAC;AAAC,KAhCIN,UAAqC;AAkC3C,eAAeA,UAAU;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzCA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}