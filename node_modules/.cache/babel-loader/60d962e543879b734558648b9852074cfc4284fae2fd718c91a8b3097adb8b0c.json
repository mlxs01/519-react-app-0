{"ast":null,"code":"/**\n * This file contains some function stubs(ie incomplete functions) that\n * you MUST use to begin the work for calculating the grades.\n *\n * You may need more functions than are currently here...we highly encourage you to define more.\n *\n * Anything that has a type of \"undefined\" you will need to replace with something.\n */\n\nimport { MY_BU_ID, BASE_API_URL, GET_DEFAULT_HEADERS } from \"../globals\";\n//import { callGrades } from \"../App\";\n\n/**\n * This function might help you write the function below.\n * It retrieves the final grade for a single student based on the passed params.\n * \n * If you are reading here and you haven't read the top of the file...go back.\n */\n//const [currStudentGrades, setStudentGrades] = useState<number[]>([]);\n\nasync function callGrades(classId, studentId) {\n  const res = await fetch(`${BASE_API_URL}/student/listGrades/${studentId}/${classId}?buid=${MY_BU_ID}`, {\n    method: \"GET\",\n    headers: GET_DEFAULT_HEADERS()\n  });\n  const json = await res.json();\n  const gradesObject = json.grades;\n  const gradeValues = Object.values(gradesObject).flatMap(nestedObject => Object.values(nestedObject).map(str => parseInt(str, 10)));\n  console.log(\"Current student's grades:\");\n  console.log(gradeValues);\n  return gradeValues;\n}\n;\nfunction calcGrade(grades, weight) {\n  const summing = grades.reduce((accumulator, currentValue, index) => {\n    const product = currentValue * weight[index];\n    return accumulator + product;\n  }, 0);\n  return summing;\n}\nasync function calculateStudentFinalGrade(classId,\n//\"A123\"\nstudentId,\n// \"U123\"\nweight // [90]\n//klass: IUniversityClass what is this variable supposed to rep?\n) {\n  const currStudentGrades = await callGrades(classId, studentId);\n  console.log(\"IM HEERE\");\n  console.log(currStudentGrades);\n  const grade = calcGrade(currStudentGrades, weight);\n  return grade; //with the classAssignments we know the weight of each assignment\n  // with /student/listGrades/studentID/classID we get the grade of these assignemnts\n}\n\n/**\n * You need to write this function! You might want to write more functions to make the code easier to read as well.\n * \n *  If you are reading here and you haven't read the top of the file...go back.\n * \n * @param classID The ID of the class for which we want to calculate the final grades\n * @returns Some data structure that has a list of each student and their final grade.\n */\nexport async function calcAllFinalGrade(classId, assessments, students) {\n  const grades = [];\n  console.log(\"this is weight:\");\n  console.log(assessments);\n  await Promise.all(students.map(async studentId => {\n    const grade = await calculateStudentFinalGrade(classId, studentId, assessments);\n    const studentGrade = {\n      studentId,\n      grade\n    };\n    grades.push(studentGrade);\n  }));\n  /*   students.forEach(async (studentId) => {\n      var grade = await calculateStudentFinalGrade(classId, studentId, assessments)\n      //console.log(grade)\n      var studentGrade = {studentId, grade}\n      grades.push(studentGrade);\n    }) */\n  console.log(\"All Grades for this Class:\");\n  console.log(grades);\n  return grades; //grab all students in this class and fun above func on each\n}","map":{"version":3,"names":["MY_BU_ID","BASE_API_URL","GET_DEFAULT_HEADERS","callGrades","classId","studentId","res","fetch","method","headers","json","gradesObject","grades","gradeValues","Object","values","flatMap","nestedObject","map","str","parseInt","console","log","calcGrade","weight","summing","reduce","accumulator","currentValue","index","product","calculateStudentFinalGrade","currStudentGrades","grade","calcAllFinalGrade","assessments","students","Promise","all","studentGrade","push"],"sources":["/Users/sun/Dropbox/My Mac (Michelles-Air)/Desktop/BU/2023/diagnostic-test-mlxs01/src/utils/calculate_grade.ts"],"sourcesContent":["/**\n * This file contains some function stubs(ie incomplete functions) that\n * you MUST use to begin the work for calculating the grades.\n *\n * You may need more functions than are currently here...we highly encourage you to define more.\n *\n * Anything that has a type of \"undefined\" you will need to replace with something.\n */\nimport { IUniversityClass, IUniversityGrades } from \"../types/api_types\";\nimport { studentGrade } from \"../types/api_types\";\nimport { useState, useEffect } from 'react';\nimport { MY_BU_ID, BASE_API_URL, GET_DEFAULT_HEADERS } from \"../globals\";\n//import { callGrades } from \"../App\";\n\n/**\n * This function might help you write the function below.\n * It retrieves the final grade for a single student based on the passed params.\n * \n * If you are reading here and you haven't read the top of the file...go back.\n */\n//const [currStudentGrades, setStudentGrades] = useState<number[]>([]);\n\nasync function callGrades(classId: string, studentId: string): Promise<number[]> {\n  const res = await fetch(`${BASE_API_URL}/student/listGrades/${studentId}/${classId}?buid=${MY_BU_ID}`, {\n    method: \"GET\",\n    headers: GET_DEFAULT_HEADERS()\n  });\n\n  const json:IUniversityGrades = await res.json();\n\n  const gradesObject = json.grades\n  const gradeValues = Object.values(gradesObject).flatMap((nestedObject) => Object.values(nestedObject).map((str) => parseInt(str, 10)));\n\n  console.log(\"Current student's grades:\");\n  console.log(gradeValues);\n\n  return gradeValues\n};\n\nfunction calcGrade(grades: number[], weight: number[]) {\n  const summing = grades.reduce((accumulator, currentValue, index) => {\n    const product = currentValue * weight[index];\n    return accumulator + product;\n  }, 0);\n  return summing\n}\n\nasync function calculateStudentFinalGrade(\n  classId: string, //\"A123\"\n  studentId: string, // \"U123\"\n  weight: number[], // [90]\n  //klass: IUniversityClass what is this variable supposed to rep?\n): Promise<number> {\n  const currStudentGrades = await callGrades(classId, studentId);\n  console.log(\"IM HEERE\")\n  console.log(currStudentGrades)\n  const grade = calcGrade(currStudentGrades, weight)\n  return grade; //with the classAssignments we know the weight of each assignment\n  // with /student/listGrades/studentID/classID we get the grade of these assignemnts\n}\n\n/**\n * You need to write this function! You might want to write more functions to make the code easier to read as well.\n * \n *  If you are reading here and you haven't read the top of the file...go back.\n * \n * @param classID The ID of the class for which we want to calculate the final grades\n * @returns Some data structure that has a list of each student and their final grade.\n */\nexport async function calcAllFinalGrade(classId: string, assessments: number[], students: string[]): Promise<studentGrade[]> {\n  const grades: studentGrade[] = []\n  console.log(\"this is weight:\")\n  console.log(assessments);\n  await Promise.all(students.map(async (studentId) => {\n    const grade = await calculateStudentFinalGrade(classId, studentId, assessments);\n    const studentGrade = { studentId, grade };\n    grades.push(studentGrade);\n  }));\n/*   students.forEach(async (studentId) => {\n    var grade = await calculateStudentFinalGrade(classId, studentId, assessments)\n    //console.log(grade)\n    var studentGrade = {studentId, grade}\n    grades.push(studentGrade);\n  }) */\n  console.log(\"All Grades for this Class:\")\n  console.log(grades)\n  return grades; //grab all students in this class and fun above func on each\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,SAASA,QAAQ,EAAEC,YAAY,EAAEC,mBAAmB,QAAQ,YAAY;AACxE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeC,UAAU,CAACC,OAAe,EAAEC,SAAiB,EAAqB;EAC/E,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEN,YAAa,uBAAsBI,SAAU,IAAGD,OAAQ,SAAQJ,QAAS,EAAC,EAAE;IACrGQ,MAAM,EAAE,KAAK;IACbC,OAAO,EAAEP,mBAAmB;EAC9B,CAAC,CAAC;EAEF,MAAMQ,IAAsB,GAAG,MAAMJ,GAAG,CAACI,IAAI,EAAE;EAE/C,MAAMC,YAAY,GAAGD,IAAI,CAACE,MAAM;EAChC,MAAMC,WAAW,GAAGC,MAAM,CAACC,MAAM,CAACJ,YAAY,CAAC,CAACK,OAAO,CAAEC,YAAY,IAAKH,MAAM,CAACC,MAAM,CAACE,YAAY,CAAC,CAACC,GAAG,CAAEC,GAAG,IAAKC,QAAQ,CAACD,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;EAEtIE,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;EACxCD,OAAO,CAACC,GAAG,CAACT,WAAW,CAAC;EAExB,OAAOA,WAAW;AACpB;AAAC;AAED,SAASU,SAAS,CAACX,MAAgB,EAAEY,MAAgB,EAAE;EACrD,MAAMC,OAAO,GAAGb,MAAM,CAACc,MAAM,CAAC,CAACC,WAAW,EAAEC,YAAY,EAAEC,KAAK,KAAK;IAClE,MAAMC,OAAO,GAAGF,YAAY,GAAGJ,MAAM,CAACK,KAAK,CAAC;IAC5C,OAAOF,WAAW,GAAGG,OAAO;EAC9B,CAAC,EAAE,CAAC,CAAC;EACL,OAAOL,OAAO;AAChB;AAEA,eAAeM,0BAA0B,CACvC3B,OAAe;AAAE;AACjBC,SAAiB;AAAE;AACnBmB,MAAgB,CAAE;AAClB;AAAA,EACiB;EACjB,MAAMQ,iBAAiB,GAAG,MAAM7B,UAAU,CAACC,OAAO,EAAEC,SAAS,CAAC;EAC9DgB,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;EACvBD,OAAO,CAACC,GAAG,CAACU,iBAAiB,CAAC;EAC9B,MAAMC,KAAK,GAAGV,SAAS,CAACS,iBAAiB,EAAER,MAAM,CAAC;EAClD,OAAOS,KAAK,CAAC,CAAC;EACd;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,iBAAiB,CAAC9B,OAAe,EAAE+B,WAAqB,EAAEC,QAAkB,EAA2B;EAC3H,MAAMxB,MAAsB,GAAG,EAAE;EACjCS,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;EAC9BD,OAAO,CAACC,GAAG,CAACa,WAAW,CAAC;EACxB,MAAME,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAClB,GAAG,CAAC,MAAOb,SAAS,IAAK;IAClD,MAAM4B,KAAK,GAAG,MAAMF,0BAA0B,CAAC3B,OAAO,EAAEC,SAAS,EAAE8B,WAAW,CAAC;IAC/E,MAAMI,YAAY,GAAG;MAAElC,SAAS;MAAE4B;IAAM,CAAC;IACzCrB,MAAM,CAAC4B,IAAI,CAACD,YAAY,CAAC;EAC3B,CAAC,CAAC,CAAC;EACL;AACA;AACA;AACA;AACA;AACA;EACElB,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;EACzCD,OAAO,CAACC,GAAG,CAACV,MAAM,CAAC;EACnB,OAAOA,MAAM,CAAC,CAAC;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}