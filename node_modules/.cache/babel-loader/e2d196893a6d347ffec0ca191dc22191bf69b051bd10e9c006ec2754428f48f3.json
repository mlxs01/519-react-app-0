{"ast":null,"code":"var _jsxFileName = \"/Users/sun/Dropbox/My Mac (Michelles-Air)/Desktop/BU/2023/diagnostic-test-mlxs01/src/components/GradeTable.tsx\",\n  _s = $RefreshSig$();\n/**\n * You might find it useful to have some dummy data for your own testing.\n * Feel free to write this function if you find that feature desirable.\n * \n * When you come to office hours for help, we will ask you if you have written\n * this function and tested your project using it.\n */\nexport function dummyData() {\n  return [];\n}\nimport React, { useState } from 'react';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport TablePagination from '@mui/material/TablePagination';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GradeTable = _ref => {\n  _s();\n  let {\n    studentData\n  } = _ref;\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, studentData.length - page * rowsPerPage);\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      sx: {\n        minWidth: 650\n      },\n      size: \"small\",\n      \"aria-label\": \"a dense table\",\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Student Id\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Student Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Class Id\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Class Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Semester\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Final Grade\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: [(rowsPerPage > 0 ? studentData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage) : studentData).map(std => /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: std.studentId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: std.studentName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: std.classId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: std.className\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: std.semester\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"right\",\n            children: std.finalGrade\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)]\n        }, std.studentId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)), emptyRows > 0 && /*#__PURE__*/_jsxDEV(TableRow, {\n          style: {\n            height: 53 * emptyRows\n          },\n          children: /*#__PURE__*/_jsxDEV(TableCell, {\n            colSpan: 6\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n      rowsPerPageOptions: [10, 25, 50],\n      component: \"div\",\n      count: studentData.length,\n      rowsPerPage: rowsPerPage,\n      page: page,\n      onPageChange: handleChangePage,\n      onRowsPerPageChange: handleChangeRowsPerPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(GradeTable, \"65nbIEELuFY2eeUXbED/8VsHrEQ=\");\n_c = GradeTable;\nexport default GradeTable;\n\n/**\n * This is the component where you should write the code for displaying the\n * the table of grades.\n *\n * You might need to change the signature of this function.\n *\n */\n//Will come back to this, grades is an object with all the info needed for this table\n/* import * as React from 'react';\nimport GradeTableProps from '../types/api_types';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\n\n\nconst GradeTable: React.FC<GradeTableProps> = ({ studentData }) => {\n  return (\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Student Id</TableCell>\n            <TableCell>Studnet Name</TableCell>\n            <TableCell>Class Id</TableCell>\n            <TableCell>Class Name</TableCell>\n            <TableCell>Semester</TableCell>\n            <TableCell>Final Grade</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {studentData.map((std) => (\n            <TableRow\n              key={std.studentId} // Use studentId as the key, not studnetName\n              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n            >\n              <TableCell>{std.studentId}</TableCell>\n              <TableCell>{std.studnetName}</TableCell>\n              <TableCell>{std.classId}</TableCell>\n              <TableCell>{std.className}</TableCell>\n              <TableCell>{std.semester}</TableCell>\n              <TableCell align=\"right\">{std.finalGrade}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default GradeTable; */\nvar _c;\n$RefreshReg$(_c, \"GradeTable\");","map":{"version":3,"names":["dummyData","React","useState","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","TablePagination","GradeTable","studentData","page","setPage","rowsPerPage","setRowsPerPage","handleChangePage","event","newPage","handleChangeRowsPerPage","parseInt","target","value","emptyRows","Math","min","length","minWidth","slice","map","std","studentId","studentName","classId","className","semester","finalGrade","height"],"sources":["/Users/sun/Dropbox/My Mac (Michelles-Air)/Desktop/BU/2023/diagnostic-test-mlxs01/src/components/GradeTable.tsx"],"sourcesContent":["/**\n * You might find it useful to have some dummy data for your own testing.\n * Feel free to write this function if you find that feature desirable.\n * \n * When you come to office hours for help, we will ask you if you have written\n * this function and tested your project using it.\n */\nexport function dummyData() {\n  return [];\n}\n\nimport React, { useState } from 'react';\nimport GradeTableProps from '../types/api_types';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport TablePagination from '@mui/material/TablePagination';\n\nconst GradeTable: React.FC<GradeTableProps> = ({ studentData }) => {\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const handleChangePage = (event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, studentData.length - page * rowsPerPage);\n\n  return (\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Student Id</TableCell>\n            <TableCell>Student Name</TableCell>\n            <TableCell>Class Id</TableCell>\n            <TableCell>Class Name</TableCell>\n            <TableCell>Semester</TableCell>\n            <TableCell>Final Grade</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {(rowsPerPage > 0\n            ? studentData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n            : studentData\n          ).map((std) => (\n            <TableRow key={std.studentId}>\n              <TableCell>{std.studentId}</TableCell>\n              <TableCell>{std.studentName}</TableCell>\n              <TableCell>{std.classId}</TableCell>\n              <TableCell>{std.className}</TableCell>\n              <TableCell>{std.semester}</TableCell>\n              <TableCell align=\"right\">{std.finalGrade}</TableCell>\n            </TableRow>\n          ))}\n\n          {emptyRows > 0 && (\n            <TableRow style={{ height: 53 * emptyRows }}>\n              <TableCell colSpan={6} />\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 50]}\n        component=\"div\"\n        count={studentData.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onPageChange={handleChangePage}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n      />\n    </TableContainer>\n  );\n};\n\nexport default GradeTable;\n\n\n/**\n * This is the component where you should write the code for displaying the\n * the table of grades.\n *\n * You might need to change the signature of this function.\n *\n */\n//Will come back to this, grades is an object with all the info needed for this table\n/* import * as React from 'react';\nimport GradeTableProps from '../types/api_types';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\n\n\nconst GradeTable: React.FC<GradeTableProps> = ({ studentData }) => {\n  return (\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Student Id</TableCell>\n            <TableCell>Studnet Name</TableCell>\n            <TableCell>Class Id</TableCell>\n            <TableCell>Class Name</TableCell>\n            <TableCell>Semester</TableCell>\n            <TableCell>Final Grade</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {studentData.map((std) => (\n            <TableRow\n              key={std.studentId} // Use studentId as the key, not studnetName\n              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n            >\n              <TableCell>{std.studentId}</TableCell>\n              <TableCell>{std.studnetName}</TableCell>\n              <TableCell>{std.classId}</TableCell>\n              <TableCell>{std.className}</TableCell>\n              <TableCell>{std.semester}</TableCell>\n              <TableCell align=\"right\">{std.finalGrade}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default GradeTable; */\n"],"mappings":"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C,eAAe;MACd,kBAAkB,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAE;MACjC,SAAS,EAAC,KAAK;MACf,KAAK,EAAEZ,WAAW,CAACe,MAAO;MAC1B,WAAW,EAAEZ,WAAY;MACzB,IAAI,EAAEF,IAAK;MACX,YAAY,EAAEI,gBAAiB;MAC/B,mBAAmB,EAAEG;IAAwB;MAAA;MAAA;MAAA;IAAA,QAC7C;EAAA;IAAA;IAAA;IAAA;EAAA,QACa;AAErB,CAAC;AAAC,GA7DIT,UAAqC;AAAA,KAArCA,UAAqC;AA+D3C,eAAeA,UAAU;;AAGzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7CA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}