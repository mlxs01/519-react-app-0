{"ast":null,"code":"/**\n * This file contains some function stubs(ie incomplete functions) that\n * you MUST use to begin the work for calculating the grades.\n *\n * You may need more functions than are currently here...we highly encourage you to define more.\n *\n * Anything that has a type of \"undefined\" you will need to replace with something.\n */\n\nimport { MY_BU_ID, BASE_API_URL, GET_DEFAULT_HEADERS } from \"../globals\";\n\n/**\n * This function might help you write the function below.\n * It retrieves the final grade for a single student based on the passed params.\n * \n * If you are reading here and you haven't read the top of the file...go back.\n */\n//const [currStudentGrades, setStudentGrades] = useState<Object>({});\nlet currStudentGrades;\nasync function callGrades(classId, studentId) {\n  const fetchStudentGrades = async () => {\n    const res = await fetch(`${BASE_API_URL}/student/listGrades/${studentId}/${classId}?buid=${MY_BU_ID}`, {\n      method: \"GET\",\n      headers: GET_DEFAULT_HEADERS()\n    });\n    if (!res.ok) {\n      // Handle non-successful response here, e.g., throw an error or return an empty array\n      throw new Error(`Failed to fetch data: ${res.status}`);\n    }\n    const json = await res.json();\n    currStudentGrades = Object.values(json.grades);\n    console.log(\"this is current student's grades:\");\n    console.log(currStudentGrades);\n  };\n  fetchStudentGrades();\n}\n;\nfunction calcGrade(grades, weight) {\n  const summing = grades.reduce((accumulator, currentValue, index) => {\n    const product = currentValue * weight[index];\n    return accumulator + product;\n  }, 0);\n  return summing;\n}\nexport async function calculateStudentFinalGrade(classId,\n//\"A123\"\nstudentId,\n// \"U123\"\nweight //{ weight: 90}\n//klass: IUniversityClass what is this variable supposed to rep?\n) {\n  //console.log(\"IM HEERE\")\n  await callGrades(classId, studentId);\n  const grade = calcGrade(currStudentGrades, weight);\n  return grade; //with the classAssignments we know the weight of each assignment\n  // with /student/listGrades/studentID/classID we get the grade of these assignemnts\n}\n\n/**\n * You need to write this function! You might want to write more functions to make the code easier to read as well.\n * \n *  If you are reading here and you haven't read the top of the file...go back.\n * \n * @param classID The ID of the class for which we want to calculate the final grades\n * @returns Some data structure that has a list of each student and their final grade.\n */\nexport async function calcAllFinalGrade(classId, assessments, students) {\n  const grades = [];\n  console.log(\"this is weight:\");\n  console.log(assessments);\n  await Promise.all(students.map(async studentId => {\n    const grade = await calculateStudentFinalGrade(classId, studentId, assessments);\n    const studentGrade = {\n      studentId,\n      grade\n    };\n    grades.push(studentGrade);\n  }));\n  /*   students.forEach(async (studentId) => {\n      var grade = await calculateStudentFinalGrade(classId, studentId, assessments)\n      //console.log(grade)\n      var studentGrade = {studentId, grade}\n      grades.push(studentGrade);\n    }) */\n  console.log(grades);\n  return grades; //grab all students in this class and fun above func on each\n}\n\n//export async function","map":{"version":3,"names":["MY_BU_ID","BASE_API_URL","GET_DEFAULT_HEADERS","currStudentGrades","callGrades","classId","studentId","fetchStudentGrades","res","fetch","method","headers","ok","Error","status","json","Object","values","grades","console","log","calcGrade","weight","summing","reduce","accumulator","currentValue","index","product","calculateStudentFinalGrade","grade","calcAllFinalGrade","assessments","students","Promise","all","map","studentGrade","push"],"sources":["/Users/sun/Dropbox/My Mac (Michelles-Air)/Desktop/BU/2023/diagnostic-test-mlxs01/src/utils/calculate_grade.ts"],"sourcesContent":["/**\n * This file contains some function stubs(ie incomplete functions) that\n * you MUST use to begin the work for calculating the grades.\n *\n * You may need more functions than are currently here...we highly encourage you to define more.\n *\n * Anything that has a type of \"undefined\" you will need to replace with something.\n */\nimport { IUniversityClass, IUniversityGrades } from \"../types/api_types\";\nimport { studentGrade } from \"../types/api_types\";\nimport React, { useState } from \"react\";\nimport { MY_BU_ID, BASE_API_URL, GET_DEFAULT_HEADERS } from \"../globals\";\n\n/**\n * This function might help you write the function below.\n * It retrieves the final grade for a single student based on the passed params.\n * \n * If you are reading here and you haven't read the top of the file...go back.\n */\n//const [currStudentGrades, setStudentGrades] = useState<Object>({});\nlet currStudentGrades: number[];\n\nasync function callGrades(classId: string, studentId: string): Promise<void> {\n  const fetchStudentGrades = async () => {\n    const res = await fetch(`${BASE_API_URL}/student/listGrades/${studentId}/${classId}?buid=${MY_BU_ID}`, {\n      method: \"GET\",\n      headers: GET_DEFAULT_HEADERS()\n    });\n    if (!res.ok) {\n      // Handle non-successful response here, e.g., throw an error or return an empty array\n      throw new Error(`Failed to fetch data: ${res.status}`);\n    }\n\n    const json:IUniversityGrades = await res.json();\n\n    currStudentGrades = Object.values(json.grades)\n    console.log(\"this is current student's grades:\")\n    console.log(currStudentGrades);\n  }\n  fetchStudentGrades();\n};\n\nfunction calcGrade(grades: number[], weight: number[]) {\n  const summing = grades.reduce((accumulator, currentValue, index) => {\n    const product = currentValue * weight[index];\n    return accumulator + product;\n  }, 0);\n  return summing\n}\n\nexport async function calculateStudentFinalGrade(\n  classId: string, //\"A123\"\n  studentId: string, // \"U123\"\n  weight: number[], //{ weight: 90}\n  //klass: IUniversityClass what is this variable supposed to rep?\n): Promise<number> {\n  //console.log(\"IM HEERE\")\n  await callGrades(classId, studentId);\n  const grade = calcGrade(currStudentGrades, weight)\n  return grade; //with the classAssignments we know the weight of each assignment\n  // with /student/listGrades/studentID/classID we get the grade of these assignemnts\n}\n\n/**\n * You need to write this function! You might want to write more functions to make the code easier to read as well.\n * \n *  If you are reading here and you haven't read the top of the file...go back.\n * \n * @param classID The ID of the class for which we want to calculate the final grades\n * @returns Some data structure that has a list of each student and their final grade.\n */\nexport async function calcAllFinalGrade(classId: string, assessments: number[], students: string[]): Promise<studentGrade[]> {\n  const grades: studentGrade[] = []\n  console.log(\"this is weight:\")\n  console.log(assessments);\n  await Promise.all(students.map(async (studentId) => {\n    const grade = await calculateStudentFinalGrade(classId, studentId, assessments);\n    const studentGrade = { studentId, grade };\n    grades.push(studentGrade);\n  }));\n/*   students.forEach(async (studentId) => {\n    var grade = await calculateStudentFinalGrade(classId, studentId, assessments)\n    //console.log(grade)\n    var studentGrade = {studentId, grade}\n    grades.push(studentGrade);\n  }) */\n  console.log(grades)\n  return grades; //grab all students in this class and fun above func on each\n}\n\n//export async function "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,SAASA,QAAQ,EAAEC,YAAY,EAAEC,mBAAmB,QAAQ,YAAY;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,iBAA2B;AAE/B,eAAeC,UAAU,CAACC,OAAe,EAAEC,SAAiB,EAAiB;EAC3E,MAAMC,kBAAkB,GAAG,YAAY;IACrC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAER,YAAa,uBAAsBK,SAAU,IAAGD,OAAQ,SAAQL,QAAS,EAAC,EAAE;MACrGU,MAAM,EAAE,KAAK;MACbC,OAAO,EAAET,mBAAmB;IAC9B,CAAC,CAAC;IACF,IAAI,CAACM,GAAG,CAACI,EAAE,EAAE;MACX;MACA,MAAM,IAAIC,KAAK,CAAE,yBAAwBL,GAAG,CAACM,MAAO,EAAC,CAAC;IACxD;IAEA,MAAMC,IAAsB,GAAG,MAAMP,GAAG,CAACO,IAAI,EAAE;IAE/CZ,iBAAiB,GAAGa,MAAM,CAACC,MAAM,CAACF,IAAI,CAACG,MAAM,CAAC;IAC9CC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAChDD,OAAO,CAACC,GAAG,CAACjB,iBAAiB,CAAC;EAChC,CAAC;EACDI,kBAAkB,EAAE;AACtB;AAAC;AAED,SAASc,SAAS,CAACH,MAAgB,EAAEI,MAAgB,EAAE;EACrD,MAAMC,OAAO,GAAGL,MAAM,CAACM,MAAM,CAAC,CAACC,WAAW,EAAEC,YAAY,EAAEC,KAAK,KAAK;IAClE,MAAMC,OAAO,GAAGF,YAAY,GAAGJ,MAAM,CAACK,KAAK,CAAC;IAC5C,OAAOF,WAAW,GAAGG,OAAO;EAC9B,CAAC,EAAE,CAAC,CAAC;EACL,OAAOL,OAAO;AAChB;AAEA,OAAO,eAAeM,0BAA0B,CAC9CxB,OAAe;AAAE;AACjBC,SAAiB;AAAE;AACnBgB,MAAgB,CAAE;AAClB;AAAA,EACiB;EACjB;EACA,MAAMlB,UAAU,CAACC,OAAO,EAAEC,SAAS,CAAC;EACpC,MAAMwB,KAAK,GAAGT,SAAS,CAAClB,iBAAiB,EAAEmB,MAAM,CAAC;EAClD,OAAOQ,KAAK,CAAC,CAAC;EACd;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,iBAAiB,CAAC1B,OAAe,EAAE2B,WAAqB,EAAEC,QAAkB,EAA2B;EAC3H,MAAMf,MAAsB,GAAG,EAAE;EACjCC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;EAC9BD,OAAO,CAACC,GAAG,CAACY,WAAW,CAAC;EACxB,MAAME,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,GAAG,CAAC,MAAO9B,SAAS,IAAK;IAClD,MAAMwB,KAAK,GAAG,MAAMD,0BAA0B,CAACxB,OAAO,EAAEC,SAAS,EAAE0B,WAAW,CAAC;IAC/E,MAAMK,YAAY,GAAG;MAAE/B,SAAS;MAAEwB;IAAM,CAAC;IACzCZ,MAAM,CAACoB,IAAI,CAACD,YAAY,CAAC;EAC3B,CAAC,CAAC,CAAC;EACL;AACA;AACA;AACA;AACA;AACA;EACElB,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;EACnB,OAAOA,MAAM,CAAC,CAAC;AACjB;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}