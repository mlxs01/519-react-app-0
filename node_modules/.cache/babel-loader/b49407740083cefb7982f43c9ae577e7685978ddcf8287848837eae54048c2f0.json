{"ast":null,"code":"var _jsxFileName = \"/Users/sun/Dropbox/My Mac (Michelles-Air)/Desktop/BU/2023/diagnostic-test-mlxs01/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { Select, Typography, MenuItem } from \"@mui/material\";\n//import { calcAllFinalGrade } from \"./utils/calculate_grade\";\n/**\n * You will find globals from this file useful!\n */\nimport { MY_BU_ID, BASE_API_URL, SEMESTER, GET_DEFAULT_HEADERS } from \"./globals\";\nimport GradeTable from \"./components/GradeTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // You will need to use more of these!\n  const [currClassId, setCurrClassId] = useState(\"\"); //this needs to be the classId\n  const [classList, setClassList] = useState([]); //This needs to be the names\n  const [currClassName, setCurrClassName] = useState(\"\"); //this needs to be currClassName\n  const [currData, setData] = useState([]);\n  const [allGrades, setGrades] = useState([]);\n  const [allClassIds, setClassIds] = useState([]);\n  const [allClassNames, setClassNames] = useState([]);\n  const [currFilteredStudents, setFilteredStudents] = useState([]);\n  const [currStudentNames, setStudentNames] = useState([]);\n  const [currFilteredAssignments, setFilteredAssignments] = useState([]);\n  //const [currStudent, setStudent] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const studentData = [];\n\n  /**\n   * This is JUST an example of how you might fetch some data(with a different API).\n   * As you might notice, this does not show up in your console right now.\n   * This is because the function isn't called by anything!\n   *\n   * You will need to lookup how to fetch data from an API using React.js\n   * Something you might want to look at is the useEffect hook.\n   *\n   * The useEffect hook will be useful for populating the data in the dropdown box.\n   * You will want to make sure that the effect is only called once at component mount.\n   *\n   * You will also need to explore the use of async/await.\n   *\n   */\n  useEffect(() => {\n    const fetchData = async () => {\n      // Fetch the list of classes\n      const classListResponse = await fetch(`${BASE_API_URL}/class/listBySemester/${SEMESTER}?buid=${MY_BU_ID}`, {\n        method: \"GET\",\n        headers: GET_DEFAULT_HEADERS()\n      });\n      const classListData = await classListResponse.json();\n\n      // Extract class IDs\n      const classIds = classListData.map(item => item.classId);\n      const classNames = classListData.map(item => item.title);\n      // Fetch class names based on class IDs\n      /*         const classNamesPromises = classIds.map(async (classId: string) => {\n                const classResponse = await fetch(\n                  `${BASE_API_URL}/class/GetById/${classId}?buid=${MY_BU_ID}`,\n                  {\n                    method: \"GET\",\n                    headers: GET_DEFAULT_HEADERS(),\n                  }\n                );\n        \n                const classData = await classResponse.json();\n                return classData.title;\n              }); */\n\n      // Wait for all class names to be fetched\n      //const classNames = await Promise.all(classNamesPromises);\n\n      // Set the state variables\n      //setClassList(classListData);\n      setClassIds(classIds);\n      setClassNames(classNames);\n    };\n    fetchData().then(() => {\n      setIsLoading(false);\n    });\n  }, []);\n  /* useEffect(() => { // this happens first thing when App opens\n    const fetchSomeData = async () => {\n        const res = await fetch(`${BASE_API_URL}/class/listBySemester/${SEMESTER}?buid=${MY_BU_ID}`, {\n          method: \"GET\",\n          headers: GET_DEFAULT_HEADERS()\n        });\n        const json = await res.json();\n        console.log(json);\n        //console.log(res.status);\n        setClassList(json); //I don't think I need this, make this instead, classList\n        const filteredValues = json.map((item:IUniversityClass) => item.classId);\n        console.log(\"The classes fetched\", filteredValues);\n        setFilteredClasses(filteredValues);\n    };\n    const filterClassName: string[] = [];\n    classList.forEach(async(class){\n        const res = await fetch(`${BASE_API_URL}/class/GetById/${class}?buid=${MY_BU_ID}`, {\n          method: \"GET\",\n          headers: GET_DEFAULT_HEADERS()\n        });\n        const json = await res.json();\n        filterClassName.push(json.title);\n      }\n    });\n      //const filterName = json.title;\n      //console.log(\"this is class name:\", filterName)\n    fetchSomeData();\n    fetchClassName().then(() => {setClassName(filterClassName); setIsLoading(false);});\n  }, []); */\n\n  useEffect(() => {\n    if (currClassId !== \"\") {\n      // Fetch students and update state\n      const fetchStudentsAndUpdateState = () => {\n        return fetch(`${BASE_API_URL}/class/listStudents/${currClassId}?buid=${MY_BU_ID}`, {\n          method: \"GET\",\n          headers: GET_DEFAULT_HEADERS()\n        }).then(res => res.json()).then(json => {\n          console.log(\"student fetch response\", json);\n          setFilteredStudents(json);\n        });\n      };\n\n      // Fetch assignments and update state\n      const fetchAssignmentsAndUpdateState = () => {\n        return fetch(`${BASE_API_URL}/class/listAssignments/${currClassId}?buid=${MY_BU_ID}`, {\n          method: \"GET\",\n          headers: GET_DEFAULT_HEADERS()\n        }).then(res => res.json()).then(json => {\n          console.log(\"assignments fetch response:\", json);\n          const filteredValues = json.map(item => item.weight);\n          setFilteredAssignments(filteredValues);\n        });\n      };\n\n      // Fetch students first and then fetch assignments after students have updated\n      fetchStudentsAndUpdateState().then(() => fetchAssignmentsAndUpdateState()).then(() => {\n        // Your code that relies on both student and assignment data\n        console.log(\"students:\", currFilteredStudents);\n        console.log(\"assignments:\", currFilteredAssignments);\n        const fetchAndSetGrades = async () => {\n          const grades = await calcAllGrades();\n          setGrades(grades);\n        };\n\n        // Perform other actions here\n        fetchAndSetGrades().then(() => {\n          hookUpData();\n          console.log(\"For Grid Table:\", studentData);\n          setData(studentData);\n          setIsLoading(false);\n        });\n      }).catch(error => {\n        // Handle errors here\n        console.error(\"Error fetching data:\", error);\n      });\n\n      //calcAllGrades();\n      //calcAllFinalGrade(currClassId, currFilteredAssignments, currFilteredStudents).then((result)=>{setGrades(result)}); //gonna need to put this into a useState Kinda thing\n    }\n  }, [currClassId, currClassName]);\n\n  /* useEffect(() => {\n    if (currFilteredStudents.length > 0 && currFilteredAssignments.length > 0) {\n      console.log(\"students:\", currFilteredStudents);\n      const filteredValues: string[] = [];\n      //console.log(\"filtered assignments:\");\n      //console.log(currFilteredAssignments);\n       const fetchAndSetGrades = async () => {\n        const grades = await calcAllGrades();\n        setGrades(grades);\n      };\n  /*       currFilteredStudents.forEach((student) => {\n        fetchStudentNames(student).then((result)=>{filteredValues.push(result)});\n        //console.log(\"what was filtered:\", filteredValues)\n      });\n      setStudentNames(filteredValues);\n      fetchAndSetGrades();\n    }\n  }, [currFilteredStudents, currFilteredAssignments]);\n   useEffect(() => {\n    if (allGrades.length > 0) {\n      hookUpData();\n      console.log(\"For Grid Table:\", studentData);\n      setData(studentData);\n      setIsLoading(false);\n    }\n  }, [allGrades]) */\n\n  const fetchStudentNames = async student => {\n    const res = await fetch(`${BASE_API_URL}/student/GetById/${student}?buid=${MY_BU_ID}`, {\n      method: \"GET\",\n      headers: GET_DEFAULT_HEADERS()\n    });\n    const json = await res.json();\n    //console.log(\"names fetch response:\", json);\n    //console.log(json);\n\n    const filteredData = json[0].name;\n    return filteredData;\n    //filteredValues.push(filteredData)\n  };\n\n  const fetchStudentGrades = async student => {\n    const res = await fetch(`${BASE_API_URL}/student/listGrades/${student}/${currClassId}?buid=${MY_BU_ID}`, {\n      method: \"GET\",\n      headers: GET_DEFAULT_HEADERS()\n    });\n    const json = await res.json();\n    const gradesObject = json.grades[0]; // Assuming there's only one object in the grades array\n    const gradeValues = Object.values(gradesObject).map(Number);\n    //console.log(\"grades in array form:\");\n    //console.log(gradeValues);\n\n    //console.log(\"Current student's grades:\");\n    //console.log(gradeValues);\n\n    return gradeValues;\n  };\n  async function calcAllGrades() {\n    const grades = [];\n    const gradePromises = currFilteredStudents.map(student => fetchStudentGrades(student));\n    const gradeResults = await Promise.all(gradePromises);\n    gradeResults.forEach(gradeValues => {\n      const grade = calcGrade(gradeValues, currFilteredAssignments);\n      grades.push(grade);\n    });\n    console.log(\"All grades calculated:\", grades);\n    return grades;\n  }\n  function calcGrade(grades, weight) {\n    const summing = grades.reduce((accumulator, currentValue, index) => {\n      const product = currentValue * ~~(weight[index] / 100);\n      return accumulator + product;\n    }, 0);\n    return summing;\n  }\n  ;\n  function hookUpData() {\n    allGrades.forEach((grade, index) => {\n      const studentId = currFilteredStudents[index];\n      const studentName = currStudentNames[index];\n      //const classId = currClassId;\n      //const className = currClassName;\n      //const semester = SEMESTER;\n      //const finalGrade = grade;\n      const data = createData(studentId, studentName, currClassId, currClassName, SEMESTER, grade);\n      studentData.push(data);\n    });\n  }\n  function createData(studentId, studnetName, classId, className, semester, finalGrade) {\n    return {\n      studentId,\n      studnetName,\n      classId,\n      className,\n      semester,\n      finalGrade\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      style: {\n        padding: \"1rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        xs: 12,\n        container: true,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          gutterBottom: true,\n          children: \"Spark Assessment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        xs: 12,\n        md: 4,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          gutterBottom: true,\n          children: \"Select a class\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"100%\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            fullWidth: true,\n            label: \"Class\",\n            value: currClassName,\n            onChange: event => {\n              const selectedIndex = +event.target.value; // Convert to number\n              setIsLoading(true);\n              setCurrClassId(allClassIds[selectedIndex]);\n              setCurrClassName(event.target.value);\n            },\n            children: allClassNames.map((className, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: index,\n              children: className\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 15\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        xs: 12,\n        md: 8,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          gutterBottom: true,\n          children: \"Final Grades\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 25\n        }, this) : \"\", /*#__PURE__*/_jsxDEV(GradeTable, {\n          studentData: currData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 291,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"FwVCq8P1n4uhEtOBGBsTtOz0EHw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Grid","Select","Typography","MenuItem","MY_BU_ID","BASE_API_URL","SEMESTER","GET_DEFAULT_HEADERS","GradeTable","App","currClassId","setCurrClassId","classList","setClassList","currClassName","setCurrClassName","currData","setData","allGrades","setGrades","allClassIds","setClassIds","allClassNames","setClassNames","currFilteredStudents","setFilteredStudents","currStudentNames","setStudentNames","currFilteredAssignments","setFilteredAssignments","isLoading","setIsLoading","studentData","fetchData","classListResponse","fetch","method","headers","classListData","json","classIds","map","item","classId","classNames","title","then","fetchStudentsAndUpdateState","res","console","log","fetchAssignmentsAndUpdateState","filteredValues","weight","fetchAndSetGrades","grades","calcAllGrades","hookUpData","catch","error","fetchStudentNames","student","filteredData","name","fetchStudentGrades","gradesObject","gradeValues","Object","values","Number","gradePromises","gradeResults","Promise","all","forEach","grade","calcGrade","push","summing","reduce","accumulator","currentValue","index","product","studentId","studentName","data","createData","studnetName","className","semester","finalGrade","width","height","padding","event","selectedIndex","target","value"],"sources":["/Users/sun/Dropbox/My Mac (Michelles-Air)/Desktop/BU/2023/diagnostic-test-mlxs01/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { Select, Typography, MenuItem } from \"@mui/material\";\n//import { calcAllFinalGrade } from \"./utils/calculate_grade\";\n/**\n * You will find globals from this file useful!\n */\nimport { MY_BU_ID, BASE_API_URL, SEMESTER, TOKEN, GET_DEFAULT_HEADERS } from \"./globals\";\nimport { IUniversityClass, IUniversityAssignments, IUniversityGrades, IUniversityStudents } from \"./types/api_types\";\nimport GradeTable from \"./components/GradeTable\";\nimport GradeTableProps from \"./types/api_types\";\n\nfunction App() {\n  // You will need to use more of these!\n  const [currClassId, setCurrClassId] = useState<string>(\"\"); //this needs to be the classId\n  const [classList, setClassList] = useState<IUniversityClass[]>([]); //This needs to be the names\n  const [currClassName, setCurrClassName] = useState<string>(\"\"); //this needs to be currClassName\n  const [currData, setData] = useState<GradeTableProps[\"studentData\"]>([]);\n  const [allGrades, setGrades] = useState<number[]>([]);\n  const [allClassIds, setClassIds] = useState<string[]>([]);\n  const [allClassNames, setClassNames] = useState<string[]>([]);\n  const [currFilteredStudents, setFilteredStudents] = useState<string[]>([]);\n  const [currStudentNames, setStudentNames] = useState<string[]>([]);\n  const [currFilteredAssignments, setFilteredAssignments] = useState<number[]>([]);\n  //const [currStudent, setStudent] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const studentData: Array<{\n    studentId: string;\n    studnetName: string;\n    classId: string;\n    className: string;\n    semester: string;\n    finalGrade: number;\n  }> = [];\n\n  /**\n   * This is JUST an example of how you might fetch some data(with a different API).\n   * As you might notice, this does not show up in your console right now.\n   * This is because the function isn't called by anything!\n   *\n   * You will need to lookup how to fetch data from an API using React.js\n   * Something you might want to look at is the useEffect hook.\n   *\n   * The useEffect hook will be useful for populating the data in the dropdown box.\n   * You will want to make sure that the effect is only called once at component mount.\n   *\n   * You will also need to explore the use of async/await.\n   *\n   */\n  useEffect(() => {\n    const fetchData = async () => {\n        // Fetch the list of classes\n        const classListResponse = await fetch(\n          `${BASE_API_URL}/class/listBySemester/${SEMESTER}?buid=${MY_BU_ID}`,\n          {\n            method: \"GET\",\n            headers: GET_DEFAULT_HEADERS(),\n          }\n        );\n  \n        const classListData = await classListResponse.json();\n  \n        // Extract class IDs\n        const classIds = classListData.map((item: IUniversityClass) => item.classId);\n        const classNames = classListData.map((item: IUniversityClass) => item.title);\n        // Fetch class names based on class IDs\n/*         const classNamesPromises = classIds.map(async (classId: string) => {\n          const classResponse = await fetch(\n            `${BASE_API_URL}/class/GetById/${classId}?buid=${MY_BU_ID}`,\n            {\n              method: \"GET\",\n              headers: GET_DEFAULT_HEADERS(),\n            }\n          );\n  \n          const classData = await classResponse.json();\n          return classData.title;\n        }); */\n  \n        // Wait for all class names to be fetched\n        //const classNames = await Promise.all(classNamesPromises);\n  \n        // Set the state variables\n        //setClassList(classListData);\n        setClassIds(classIds);\n        setClassNames(classNames);\n    };\n  \n    fetchData().then(()=> {setIsLoading(false)});\n  }, []);\n  /* useEffect(() => { // this happens first thing when App opens\n    const fetchSomeData = async () => {\n        const res = await fetch(`${BASE_API_URL}/class/listBySemester/${SEMESTER}?buid=${MY_BU_ID}`, {\n          method: \"GET\",\n          headers: GET_DEFAULT_HEADERS()\n        });\n        const json = await res.json();\n        console.log(json);\n        //console.log(res.status);\n        setClassList(json); //I don't think I need this, make this instead, classList\n        const filteredValues = json.map((item:IUniversityClass) => item.classId);\n        console.log(\"The classes fetched\", filteredValues);\n        setFilteredClasses(filteredValues);\n    };\n    const filterClassName: string[] = [];\n    classList.forEach(async(class){\n        const res = await fetch(`${BASE_API_URL}/class/GetById/${class}?buid=${MY_BU_ID}`, {\n          method: \"GET\",\n          headers: GET_DEFAULT_HEADERS()\n        });\n        const json = await res.json();\n        filterClassName.push(json.title);\n      }\n    });\n      //const filterName = json.title;\n      //console.log(\"this is class name:\", filterName)\n    fetchSomeData();\n    fetchClassName().then(() => {setClassName(filterClassName); setIsLoading(false);});\n  }, []); */\n\n  useEffect(() => {\n    if (currClassId !== \"\") {\n      // Fetch students and update state\n      const fetchStudentsAndUpdateState = () => {\n        return fetch(`${BASE_API_URL}/class/listStudents/${currClassId}?buid=${MY_BU_ID}`, {\n          method: \"GET\",\n          headers: GET_DEFAULT_HEADERS()\n        })\n          .then((res) => res.json())\n          .then((json) => {\n            console.log(\"student fetch response\", json);\n            setFilteredStudents(json);\n          });\n      };\n\n      // Fetch assignments and update state\n      const fetchAssignmentsAndUpdateState = () => {\n        return fetch(`${BASE_API_URL}/class/listAssignments/${currClassId}?buid=${MY_BU_ID}`, {\n          method: \"GET\",\n          headers: GET_DEFAULT_HEADERS()\n        })\n          .then((res) => res.json())\n          .then((json) => {\n            console.log(\"assignments fetch response:\", json);\n            const filteredValues = json.map((item: IUniversityAssignments) => item.weight);\n            setFilteredAssignments(filteredValues);\n          });\n      };\n\n      // Fetch students first and then fetch assignments after students have updated\n      fetchStudentsAndUpdateState()\n        .then(() => fetchAssignmentsAndUpdateState())\n        .then(() => {\n          // Your code that relies on both student and assignment data\n          console.log(\"students:\", currFilteredStudents);\n          console.log(\"assignments:\", currFilteredAssignments);\n\n          const fetchAndSetGrades = async () => {\n            const grades = await calcAllGrades();\n            setGrades(grades);\n          };\n\n          // Perform other actions here\n          fetchAndSetGrades().then(() => {\n            hookUpData();\n            console.log(\"For Grid Table:\", studentData);\n            setData(studentData);\n            setIsLoading(false);\n          });\n        })\n        .catch((error) => {\n          // Handle errors here\n          console.error(\"Error fetching data:\", error);\n        });\n\n\n        //calcAllGrades();\n        //calcAllFinalGrade(currClassId, currFilteredAssignments, currFilteredStudents).then((result)=>{setGrades(result)}); //gonna need to put this into a useState Kinda thing\n    }\n  }, [currClassId, currClassName]);\n\n  /* useEffect(() => {\n    if (currFilteredStudents.length > 0 && currFilteredAssignments.length > 0) {\n      console.log(\"students:\", currFilteredStudents);\n      const filteredValues: string[] = [];\n      //console.log(\"filtered assignments:\");\n      //console.log(currFilteredAssignments);\n\n      const fetchAndSetGrades = async () => {\n        const grades = await calcAllGrades();\n        setGrades(grades);\n      };\n\n/*       currFilteredStudents.forEach((student) => {\n        fetchStudentNames(student).then((result)=>{filteredValues.push(result)});\n        //console.log(\"what was filtered:\", filteredValues)\n      });\n      setStudentNames(filteredValues);\n      fetchAndSetGrades();\n    }\n  }, [currFilteredStudents, currFilteredAssignments]);\n\n  useEffect(() => {\n    if (allGrades.length > 0) {\n      hookUpData();\n      console.log(\"For Grid Table:\", studentData);\n      setData(studentData);\n      setIsLoading(false);\n    }\n  }, [allGrades]) */\n\n  const fetchStudentNames = async (student: string) => {\n    const res = await fetch(`${BASE_API_URL}/student/GetById/${student}?buid=${MY_BU_ID}`, {\n      method: \"GET\",\n      headers: GET_DEFAULT_HEADERS()\n    });\n    const json = await res.json();\n    //console.log(\"names fetch response:\", json);\n    //console.log(json);\n  \n    const filteredData: string = json[0].name;\n    return filteredData;\n    //filteredValues.push(filteredData)\n  }; \n\n  const fetchStudentGrades = async (student: string) => {\n    const res = await fetch(`${BASE_API_URL}/student/listGrades/${student}/${currClassId}?buid=${MY_BU_ID}`, {\n      method: \"GET\",\n      headers: GET_DEFAULT_HEADERS()\n    });\n  \n    const json = await res.json();\n    const gradesObject = json.grades[0]; // Assuming there's only one object in the grades array\n    const gradeValues: number[] = Object.values(gradesObject).map(Number);\n    //console.log(\"grades in array form:\");\n    //console.log(gradeValues);\n  \n    //console.log(\"Current student's grades:\");\n    //console.log(gradeValues);\n  \n    return gradeValues\n  };\n\n  async function calcAllGrades() {\n    const grades: number[] = [];\n    const gradePromises = currFilteredStudents.map((student) => fetchStudentGrades(student));\n    \n    const gradeResults = await Promise.all(gradePromises);\n    gradeResults.forEach((gradeValues) => {\n      const grade = calcGrade(gradeValues, currFilteredAssignments);\n      grades.push(grade);\n    });\n  \n    console.log(\"All grades calculated:\", grades);\n    return grades;\n  }\n\n  function calcGrade(grades: number[], weight: number[]) {\n    const summing = grades.reduce((accumulator, currentValue, index) => {\n      const product = currentValue * ~~(weight[index]/100);\n      return accumulator + product;\n    }, 0);\n    return summing;\n  };\n  \n  function hookUpData(){\n    allGrades.forEach((grade, index) => {\n      const studentId = currFilteredStudents[index];\n      const studentName = currStudentNames[index];\n      //const classId = currClassId;\n      //const className = currClassName;\n      //const semester = SEMESTER;\n      //const finalGrade = grade;\n      const data = createData(studentId, studentName, currClassId, currClassName, SEMESTER, grade);\n      studentData.push(data);\n    });\n  }\n\n  function createData(\n    studentId: string,\n    studnetName: string,\n    classId: string,\n    className: string,\n    semester: string,\n    finalGrade: number,\n  ) {\n    return { studentId, studnetName, classId, className, semester, finalGrade };\n  }\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\" }}>\n      <Grid container spacing={2} style={{ padding: \"1rem\" }}>\n        <Grid xs={12} container alignItems=\"center\" justifyContent=\"center\">\n          <Typography variant=\"h2\" gutterBottom>\n            Spark Assessment\n          </Typography>\n        </Grid>\n        <Grid xs={12} md={4}>\n          <Typography variant=\"h4\" gutterBottom>\n            Select a class\n          </Typography>\n          <div style={{ width: \"100%\" }}>\n          <Select\n            fullWidth={true}\n            label=\"Class\"\n            value={currClassName}\n            onChange={(event) => {\n              const selectedIndex = +event.target.value; // Convert to number\n              setIsLoading(true);\n              setCurrClassId(allClassIds[selectedIndex]);\n              setCurrClassName(event.target.value);\n            }}\n          >\n            {allClassNames.map((className, index) => (\n              <MenuItem key={index} value={index}>\n                {className}\n              </MenuItem>\n            ))}\n          </Select>\n{/*             <Select fullWidth={true} label=\"Class\"\n            value = {currClassName}\n            onChange={x => setCurrClassId(allClassIds[x.target.key])}>\n              {allClassNames.map((className, index) => (\n              <MenuItem key={index} value={index}>\n                {className}\n              </MenuItem>\n            ))}\n            </Select> */}\n          </div>\n        </Grid>\n        <Grid xs={12} md={8}>\n          <Typography variant=\"h4\" gutterBottom>\n            Final Grades\n          </Typography>\n          {isLoading ? (<div>Loading data...</div>) : (\"\")}\n          <GradeTable studentData={currData} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}