{"ast":null,"code":"/**\n * This file contains some function stubs(ie incomplete functions) that\n * you MUST use to begin the work for calculating the grades.\n *\n * You may need more functions than are currently here...we highly encourage you to define more.\n *\n * Anything that has a type of \"undefined\" you will need to replace with something.\n */\n\nimport { useState } from \"react\";\nimport { MY_BU_ID, BASE_API_URL, GET_DEFAULT_HEADERS } from \"../globals\";\n\n/**\n * This function might help you write the function below.\n * It retrieves the final grade for a single student based on the passed params.\n * \n * If you are reading here and you haven't read the top of the file...go back.\n */\nconst [currStudentGrades, setStudentGrades] = useState({});\nasync function callGrades(classId, studentId) {\n  const fetchStudentGrades = async () => {\n    const res = await fetch(`${BASE_API_URL}/student/listGrades/${studentId}/${classId}?buid=${MY_BU_ID}`, {\n      method: \"GET\",\n      headers: GET_DEFAULT_HEADERS()\n    });\n    const json = await res.json();\n    const filteredValues = json.map(item => {\n      return {\n        grades: item.grades\n      };\n    });\n    setStudentGrades(filteredValues);\n    console.log(currStudentGrades);\n  };\n}\n;\nfunction calcGrade(grades, weight) {}\nexport async function calculateStudentFinalGrade(classId,\n//\"A123\"\nstudentId,\n// \"U123\"\nweight //{assignment: \"R123\", weight: 90}\n//klass: IUniversityClass what is this variable supposed to rep?\n) {\n  const studentGrades = await callGrades(classId, studentId);\n  const grade = calcGrade(studentGrades, weight);\n  return 30; //with the classAssignments we know the weight of each assignment\n  // with /student/listGrades/studentID/classID we get the grade of these assignemnts\n}\n\n/**\n * You need to write this function! You might want to write more functions to make the code easier to read as well.\n * \n *  If you are reading here and you haven't read the top of the file...go back.\n * \n * @param classID The ID of the class for which we want to calculate the final grades\n * @returns Some data structure that has a list of each student and their final grade.\n */\nexport async function calcAllFinalGrade(classId, assessments, students) {\n  const grades = [];\n  const weight = Object.values(assessments);\n  students.forEach(async studentId => {\n    var grade = await calculateStudentFinalGrade(classId, studentId, weight);\n    var studentGrade = {\n      studentId,\n      grade\n    };\n    grades.push(studentGrade);\n  });\n  return grades; //grab all students in this class and fun above func on each\n}\n\n//export async function","map":{"version":3,"names":["useState","MY_BU_ID","BASE_API_URL","GET_DEFAULT_HEADERS","currStudentGrades","setStudentGrades","callGrades","classId","studentId","fetchStudentGrades","res","fetch","method","headers","json","filteredValues","map","item","grades","console","log","calcGrade","weight","calculateStudentFinalGrade","studentGrades","grade","calcAllFinalGrade","assessments","students","Object","values","forEach","studentGrade","push"],"sources":["/Users/sun/Dropbox/My Mac (Michelles-Air)/Desktop/BU/2023/diagnostic-test-mlxs01/src/utils/calculate_grade.ts"],"sourcesContent":["/**\n * This file contains some function stubs(ie incomplete functions) that\n * you MUST use to begin the work for calculating the grades.\n *\n * You may need more functions than are currently here...we highly encourage you to define more.\n *\n * Anything that has a type of \"undefined\" you will need to replace with something.\n */\nimport { IUniversityClass, IUniversityGrades } from \"../types/api_types\";\nimport { studentGrade } from \"../types/api_types\";\nimport React, { useState } from \"react\";\nimport { MY_BU_ID, BASE_API_URL, GET_DEFAULT_HEADERS } from \"../globals\";\n\n/**\n * This function might help you write the function below.\n * It retrieves the final grade for a single student based on the passed params.\n * \n * If you are reading here and you haven't read the top of the file...go back.\n */\nconst [currStudentGrades, setStudentGrades] = useState<Object>({});\n\nasync function callGrades(classId: string, studentId: string) {\n  const fetchStudentGrades = async () => {\n    const res = await fetch(`${BASE_API_URL}/student/listGrades/${studentId}/${classId}?buid=${MY_BU_ID}`, {\n      method: \"GET\",\n      headers: GET_DEFAULT_HEADERS()\n    });\n    const json = await res.json();\n    const filteredValues = json.map((item:IUniversityGrades) => {\n      return {grades: item.grades}\n    });\n    setStudentGrades(filteredValues);\n    console.log(currStudentGrades);\n  }\n};\n\nfunction calcGrade(grades, weight) {\n  \n}\n\nexport async function calculateStudentFinalGrade(\n  classId: string, //\"A123\"\n  studentId: string, // \"U123\"\n  weight: number[], //{assignment: \"R123\", weight: 90}\n  //klass: IUniversityClass what is this variable supposed to rep?\n): Promise<number> {\n  const studentGrades = await callGrades(classId, studentId);\n  const grade = calcGrade(studentGrades, weight)\n  return 30; //with the classAssignments we know the weight of each assignment\n  // with /student/listGrades/studentID/classID we get the grade of these assignemnts\n}\n\n/**\n * You need to write this function! You might want to write more functions to make the code easier to read as well.\n * \n *  If you are reading here and you haven't read the top of the file...go back.\n * \n * @param classID The ID of the class for which we want to calculate the final grades\n * @returns Some data structure that has a list of each student and their final grade.\n */\nexport async function calcAllFinalGrade(classId: string, assessments: Object[], students: string[]): Promise<studentGrade[]> {\n  const grades: studentGrade[] = []\n  const weight = Object.values(assessments);\n  students.forEach(async (studentId) => {\n    var grade = await calculateStudentFinalGrade(classId, studentId, weight)\n    var studentGrade = {studentId, grade}\n    grades.push(studentGrade);\n  })\n  return grades; //grab all students in this class and fun above func on each\n}\n\n//export async function "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAAgBA,QAAQ,QAAQ,OAAO;AACvC,SAASC,QAAQ,EAAEC,YAAY,EAAEC,mBAAmB,QAAQ,YAAY;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,CAACC,iBAAiB,EAAEC,gBAAgB,CAAC,GAAGL,QAAQ,CAAS,CAAC,CAAC,CAAC;AAElE,eAAeM,UAAU,CAACC,OAAe,EAAEC,SAAiB,EAAE;EAC5D,MAAMC,kBAAkB,GAAG,YAAY;IACrC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAET,YAAa,uBAAsBM,SAAU,IAAGD,OAAQ,SAAQN,QAAS,EAAC,EAAE;MACrGW,MAAM,EAAE,KAAK;MACbC,OAAO,EAAEV,mBAAmB;IAC9B,CAAC,CAAC;IACF,MAAMW,IAAI,GAAG,MAAMJ,GAAG,CAACI,IAAI,EAAE;IAC7B,MAAMC,cAAc,GAAGD,IAAI,CAACE,GAAG,CAAEC,IAAsB,IAAK;MAC1D,OAAO;QAACC,MAAM,EAAED,IAAI,CAACC;MAAM,CAAC;IAC9B,CAAC,CAAC;IACFb,gBAAgB,CAACU,cAAc,CAAC;IAChCI,OAAO,CAACC,GAAG,CAAChB,iBAAiB,CAAC;EAChC,CAAC;AACH;AAAC;AAED,SAASiB,SAAS,CAACH,MAAM,EAAEI,MAAM,EAAE,CAEnC;AAEA,OAAO,eAAeC,0BAA0B,CAC9ChB,OAAe;AAAE;AACjBC,SAAiB;AAAE;AACnBc,MAAgB,CAAE;AAClB;AAAA,EACiB;EACjB,MAAME,aAAa,GAAG,MAAMlB,UAAU,CAACC,OAAO,EAAEC,SAAS,CAAC;EAC1D,MAAMiB,KAAK,GAAGJ,SAAS,CAACG,aAAa,EAAEF,MAAM,CAAC;EAC9C,OAAO,EAAE,CAAC,CAAC;EACX;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeI,iBAAiB,CAACnB,OAAe,EAAEoB,WAAqB,EAAEC,QAAkB,EAA2B;EAC3H,MAAMV,MAAsB,GAAG,EAAE;EACjC,MAAMI,MAAM,GAAGO,MAAM,CAACC,MAAM,CAACH,WAAW,CAAC;EACzCC,QAAQ,CAACG,OAAO,CAAC,MAAOvB,SAAS,IAAK;IACpC,IAAIiB,KAAK,GAAG,MAAMF,0BAA0B,CAAChB,OAAO,EAAEC,SAAS,EAAEc,MAAM,CAAC;IACxE,IAAIU,YAAY,GAAG;MAACxB,SAAS;MAAEiB;IAAK,CAAC;IACrCP,MAAM,CAACe,IAAI,CAACD,YAAY,CAAC;EAC3B,CAAC,CAAC;EACF,OAAOd,MAAM,CAAC,CAAC;AACjB;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}